{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/dhemanth123/simple-logistic-regression?scriptVersionId=184885885\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","execution_count":1,"id":"a7b9547e","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.execute_input":"2024-06-22T11:28:01.659091Z","iopub.status.busy":"2024-06-22T11:28:01.658691Z","iopub.status.idle":"2024-06-22T11:28:02.489029Z","shell.execute_reply":"2024-06-22T11:28:02.487937Z"},"papermill":{"duration":0.838656,"end_time":"2024-06-22T11:28:02.49161","exception":false,"start_time":"2024-06-22T11:28:01.652954","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["/kaggle/input/experiance-csv/Experiance.csv\n"]}],"source":["# This Python 3 environment comes with many helpful analytics libraries installed\n","# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n","# For example, here's several helpful packages to load\n","\n","import numpy as np # linear algebra\n","import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n","\n","# Input data files are available in the read-only \"../input/\" directory\n","# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n","\n","import os\n","for dirname, _, filenames in os.walk('/kaggle/input'):\n","    for filename in filenames:\n","        print(os.path.join(dirname, filename))\n","\n","# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n","# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"]},{"cell_type":"markdown","id":"af96d58d","metadata":{"papermill":{"duration":0.003336,"end_time":"2024-06-22T11:28:02.498899","exception":false,"start_time":"2024-06-22T11:28:02.495563","status":"completed"},"tags":[]},"source":["# **What is Logistic Regression?**\n","-->Logistic regression is a statistical method used for binary classification.\n","\n","-->This means it helps to predict the probability that a given input belongs to one of two possible categories. \n","\n","-->For example, it can be used to predict whether an email is spam or not, whether a customer will buy a product or not, etc."]},{"cell_type":"markdown","id":"063fc940","metadata":{"papermill":{"duration":0.003274,"end_time":"2024-06-22T11:28:02.505698","exception":false,"start_time":"2024-06-22T11:28:02.502424","status":"completed"},"tags":[]},"source":["# **#steps included to do logisitc regression**\n","1.Import the necessary libraries.\n","\n","2.Read the data set.\n","\n","3.Do EDA(Exploratory data Analysis if requried).\n","\n","4.Split the datra for training and testing.\n","\n","5.Build the model. \n","\n","6.Train the model.\n","\n","7.Test the model.\n","\n","8.Verify the model using the various performance matrices.\n"]},{"cell_type":"markdown","id":"fee567ec","metadata":{"papermill":{"duration":0.003316,"end_time":"2024-06-22T11:28:02.512498","exception":false,"start_time":"2024-06-22T11:28:02.509182","status":"completed"},"tags":[]},"source":[]},{"cell_type":"code","execution_count":null,"id":"abe2bb60","metadata":{"papermill":{"duration":0.003329,"end_time":"2024-06-22T11:28:02.519328","exception":false,"start_time":"2024-06-22T11:28:02.515999","status":"completed"},"tags":[]},"outputs":[],"source":[]},{"cell_type":"code","execution_count":2,"id":"8af153f7","metadata":{"execution":{"iopub.execute_input":"2024-06-22T11:28:02.528752Z","iopub.status.busy":"2024-06-22T11:28:02.528058Z","iopub.status.idle":"2024-06-22T11:28:04.280025Z","shell.execute_reply":"2024-06-22T11:28:04.27887Z"},"papermill":{"duration":1.759894,"end_time":"2024-06-22T11:28:04.282811","exception":false,"start_time":"2024-06-22T11:28:02.522917","status":"completed"},"tags":[]},"outputs":[],"source":["#import the necessary libries\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score,confusion_matrix"]},{"cell_type":"code","execution_count":3,"id":"1c043937","metadata":{"execution":{"iopub.execute_input":"2024-06-22T11:28:04.292063Z","iopub.status.busy":"2024-06-22T11:28:04.291698Z","iopub.status.idle":"2024-06-22T11:28:04.297498Z","shell.execute_reply":"2024-06-22T11:28:04.296374Z"},"papermill":{"duration":0.012992,"end_time":"2024-06-22T11:28:04.2998","exception":false,"start_time":"2024-06-22T11:28:04.286808","status":"completed"},"tags":[]},"outputs":[],"source":["#import the necessary libries\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score,confusion_matrix"]},{"cell_type":"code","execution_count":4,"id":"efded8b5","metadata":{"execution":{"iopub.execute_input":"2024-06-22T11:28:04.309424Z","iopub.status.busy":"2024-06-22T11:28:04.30859Z","iopub.status.idle":"2024-06-22T11:28:04.353341Z","shell.execute_reply":"2024-06-22T11:28:04.352225Z"},"papermill":{"duration":0.052172,"end_time":"2024-06-22T11:28:04.355799","exception":false,"start_time":"2024-06-22T11:28:04.303627","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>WorkExp</th>\n","      <th>Promotion</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>7</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>7</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>8</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>495</th>\n","      <td>7</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>496</th>\n","      <td>1</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>497</th>\n","      <td>2</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>498</th>\n","      <td>2</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>499</th>\n","      <td>5</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>500 rows × 2 columns</p>\n","</div>"],"text/plain":["     WorkExp  Promotion\n","0          7        1.0\n","1          1        1.0\n","2          2        0.0\n","3          7        0.0\n","4          8        0.0\n","..       ...        ...\n","495        7        1.0\n","496        1        1.0\n","497        2        0.0\n","498        2        0.0\n","499        5        1.0\n","\n","[500 rows x 2 columns]"]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["import numpy as np\n","df=pd.read_csv(\"/kaggle/input/experiance-csv/Experiance.csv\")\n","df.dropna(axis=0,inplace=True)\n","df\n"]},{"cell_type":"code","execution_count":5,"id":"0039b556","metadata":{"execution":{"iopub.execute_input":"2024-06-22T11:28:04.366002Z","iopub.status.busy":"2024-06-22T11:28:04.365277Z","iopub.status.idle":"2024-06-22T11:28:04.375899Z","shell.execute_reply":"2024-06-22T11:28:04.374767Z"},"papermill":{"duration":0.018269,"end_time":"2024-06-22T11:28:04.378149","exception":false,"start_time":"2024-06-22T11:28:04.35988","status":"completed"},"tags":[]},"outputs":[],"source":["#Splitting the data set\n","df[\"WorkExp\"]=np.array(df[[\"WorkExp\"]])\n","\n","x_train,x_test,y_train,y_test=train_test_split(df[[\"WorkExp\"]],df[\"Promotion\"],test_size=0.2,random_state=30)\n"]},{"cell_type":"code","execution_count":6,"id":"5a1e83c7","metadata":{"execution":{"iopub.execute_input":"2024-06-22T11:28:04.387862Z","iopub.status.busy":"2024-06-22T11:28:04.387461Z","iopub.status.idle":"2024-06-22T11:28:04.408308Z","shell.execute_reply":"2024-06-22T11:28:04.407194Z"},"papermill":{"duration":0.02843,"end_time":"2024-06-22T11:28:04.410614","exception":false,"start_time":"2024-06-22T11:28:04.382184","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"],"text/plain":["LogisticRegression()"]},"execution_count":6,"metadata":{},"output_type":"execute_result"}],"source":["#building the model\n","reg=LogisticRegression()\n","reg.fit(x_train,y_train)\n"]},{"cell_type":"code","execution_count":7,"id":"83fdaceb","metadata":{"execution":{"iopub.execute_input":"2024-06-22T11:28:04.42121Z","iopub.status.busy":"2024-06-22T11:28:04.420391Z","iopub.status.idle":"2024-06-22T11:28:04.427138Z","shell.execute_reply":"2024-06-22T11:28:04.425975Z"},"papermill":{"duration":0.014409,"end_time":"2024-06-22T11:28:04.429302","exception":false,"start_time":"2024-06-22T11:28:04.414893","status":"completed"},"tags":[]},"outputs":[],"source":["y_pred=reg.predict(x_test)"]},{"cell_type":"code","execution_count":8,"id":"60bd2d04","metadata":{"execution":{"iopub.execute_input":"2024-06-22T11:28:04.440012Z","iopub.status.busy":"2024-06-22T11:28:04.439169Z","iopub.status.idle":"2024-06-22T11:28:04.449018Z","shell.execute_reply":"2024-06-22T11:28:04.447968Z"},"papermill":{"duration":0.017583,"end_time":"2024-06-22T11:28:04.451263","exception":false,"start_time":"2024-06-22T11:28:04.43368","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["array([[29, 12],\n","       [45, 14]])"]},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":["k=confusion_matrix(y_test,y_pred)\n","k"]},{"cell_type":"code","execution_count":9,"id":"3220a7f1","metadata":{"execution":{"iopub.execute_input":"2024-06-22T11:28:04.462265Z","iopub.status.busy":"2024-06-22T11:28:04.461317Z","iopub.status.idle":"2024-06-22T11:28:04.75713Z","shell.execute_reply":"2024-06-22T11:28:04.756075Z"},"papermill":{"duration":0.303689,"end_time":"2024-06-22T11:28:04.759424","exception":false,"start_time":"2024-06-22T11:28:04.455735","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["<Axes: >"]},"execution_count":9,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"","text/plain":["<Figure size 640x480 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["sns.heatmap(k,annot=True)"]}],"metadata":{"kaggle":{"accelerator":"none","dataSources":[{"datasetId":5219759,"sourceId":8702808,"sourceType":"datasetVersion"}],"dockerImageVersionId":30732,"isGpuEnabled":false,"isInternetEnabled":false,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.13"},"papermill":{"default_parameters":{},"duration":6.925405,"end_time":"2024-06-22T11:28:05.385661","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-06-22T11:27:58.460256","version":"2.5.0"}},"nbformat":4,"nbformat_minor":5}